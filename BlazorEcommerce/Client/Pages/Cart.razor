@page "/cart"
@inject ICartService CartService

<PageTitle>Shopping Cart</PageTitle>
<h3>Shopping Cart</h3>
@if (cartProducts == null || cartProducts.Count == 0)
{
    <span>@message</span>

}
else
{
    <div>
        @foreach (var product in cartProducts)
        {
            <div class="container">
                <div class="image-wrapper">
                    <img src="@product.ImageUrl" class="image" />
                </div>
                <div class="name">
                    <h5><a href="/product/@product.ProductId">@product.Title</a></h5>
                    <span>@product.ProductType</span><br/>
                    <input type="number" value="@product.Qauntity" 
                    @onchange="@((ChangeEventArgs e)=>UpdateQuantity(e,product))"
                           class="form-control input-quantity" min="1" />
                    <button class="btn-delete" @onclick="@(() => RemoveProductFromCart(product.ProductId,product.ProductTypeId))">Delete</button>
                </div>
                <div class="cart-product-item">$ @(product.Price * product.Qauntity)</div>
            </div>
        }
        <div class="cart-product-price">
            Total (@cartProducts.Count): $@cartProducts.Sum(product =>product.Price * product.Qauntity)
        </div>
    </div>
}



@code {
    List<CartProductResponse> cartProducts = null;
    string message = "Loading Products ...";
    protected override async Task OnInitializedAsync()
    {
        await LoadCart();
    }
    private async Task RemoveProductFromCart(int productId,int productTypeId)
    {
        await CartService.RemoveProductFromCart(productId, productTypeId);
        await LoadCart();
    }
    private async Task LoadCart()
    {
        await CartService.GetCartItemsCount();
        cartProducts = await CartService.GetCartProducts();
        if (cartProducts == null || cartProducts.Count==0)
        {
            message = "Your Cart is Empty";
        }
    }
    private async Task UpdateQuantity(ChangeEventArgs e,CartProductResponse product)
    {
        product.Qauntity = int.Parse(e.Value.ToString());
        if (product.Qauntity < 1) product.Qauntity = 1;
        await CartService.UpdateQuantity(product);
    }
}
